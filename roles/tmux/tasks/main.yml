---
# Include macOS-specific tasks
- name: Include macOS-specific tasks
  include_tasks: darwin.yml
  when: ansible_os_family == "Darwin"
  tags: blog

- name: Check if tmux is already installed
  stat:
    path: "{{ tmux_binary_path }}"
  register: tmux_exists
  tags: blog

- name: Display tmux installation status
  debug:
    msg: "tmux already installed at {{ tmux_binary_path }}"
  when: tmux_exists.stat.exists
  tags: blog

- name: Install tmux from source
  tags: blog
  block:
    - name: Install tmux build dependencies
      package:
        name: "{{ tmux_build_deps }}"
        state: present
      when: ansible_os_family != "Darwin"

    - name: Create build directory
      file:
        path: "{{ tmux_build_dir }}"
        state: directory
        mode: '0755'

    - name: Get latest tmux release info from GitHub
      uri:
        url: https://api.github.com/repos/tmux/tmux/releases/latest
        method: GET
        return_content: yes
      register: tmux_release_info

    - name: Set tmux download URL
      set_fact:
        tmux_download_url: "{{ tmux_release_info.json.tarball_url }}"
        tmux_tag: "{{ tmux_release_info.json.tag_name }}"

    - name: Download tmux source
      get_url:
        url: "{{ tmux_download_url }}"
        dest: "{{ tmux_build_dir }}/tmux-{{ tmux_tag }}.tar.gz"
        mode: '0644'

    - name: Extract tmux source
      unarchive:
        src: "{{ tmux_build_dir }}/tmux-{{ tmux_tag }}.tar.gz"
        dest: "{{ tmux_build_dir }}"
        remote_src: yes

    - name: Find extracted directory
      find:
        paths: "{{ tmux_build_dir }}"
        file_type: directory
        patterns: "tmux-tmux-*"
      register: tmux_source_dir

    - name: Configure tmux build
      shell: |
        cd "{{ tmux_source_dir.files[0].path }}"
        sh autogen.sh
        ./configure --prefix={{ tmux_install_prefix }}
      args:
        chdir: "{{ tmux_source_dir.files[0].path }}"

    - name: Compile tmux
      shell: |
        cd "{{ tmux_source_dir.files[0].path }}"
        make -j{{ ansible_processor_vcpus }}
      args:
        chdir: "{{ tmux_source_dir.files[0].path }}"

    - name: Install tmux
      shell: |
        cd "{{ tmux_source_dir.files[0].path }}"
        make install
      args:
        chdir: "{{ tmux_source_dir.files[0].path }}"

    - name: Clean up build directory
      file:
        path: "{{ tmux_build_dir }}"
        state: absent

    - name: Verify tmux installation
      command: "{{ tmux_binary_path }} -V"
      register: tmux_version_check
      changed_when: false

    - name: Display tmux installation success
      debug:
        msg: |
          tmux installed successfully!
          Version: {{ tmux_version_check.stdout }}
          Location: {{ tmux_binary_path }}

  when: not tmux_exists.stat.exists and ansible_os_family != "Darwin"
  rescue:
    - name: Clean up on failure
      file:
        path: "{{ tmux_build_dir }}"
        state: absent
      ignore_errors: yes

    - name: Display installation failure
      fail:
        msg: "tmux installation failed. Build directory cleaned up."

# Install oh-my-tmux configuration
- name: Check if oh-my-tmux is already installed
  stat:
    path: "{{ dev_home }}/.tmux/.git"
  register: oh_my_tmux_exists
  become: no
  tags:
    - oh-my-tmux
    - blog

- name: Install oh-my-tmux
  tags:
    - oh-my-tmux
    - blog
  block:
    - name: Clone oh-my-tmux repository
      git:
        repo: https://github.com/gpakosz/.tmux.git
        dest: "{{ dev_home }}/.tmux"
        update: yes
      become: no

    - name: Create symlink to .tmux.conf
      file:
        src: "{{ dev_home }}/.tmux/.tmux.conf"
        dest: "{{ dev_home }}/.tmux.conf"
        state: link
        force: yes
      become: no

    - name: Copy .tmux.conf.local template
      copy:
        src: "{{ dev_home }}/.tmux/.tmux.conf.local"
        dest: "{{ dev_home }}/.tmux.conf.local"
        remote_src: yes
        force: no
      become: no

    - name: Enable mouse mode in .tmux.conf.local
      lineinfile:
        path: "{{ dev_home }}/.tmux.conf.local"
        regexp: '^#set -g mouse on'
        line: 'set -g mouse on'
        backrefs: yes
      become: no

    - name: Enable vi mode keys in .tmux.conf.local
      lineinfile:
        path: "{{ dev_home }}/.tmux.conf.local"
        regexp: '^#{{ item }}'
        line: '{{ item }}'
        backrefs: yes
      loop:
        - 'set -g status-keys vi'
        - 'set -g mode-keys vi'
      become: no

    - name: Enable powerline separators in .tmux.conf.local
      replace:
        path: "{{ dev_home }}/.tmux.conf.local"
        regexp: '^#({{ item.key }}=.*)$'
        replace: '\1'
      loop:
        - { key: "tmux_conf_theme_left_separator_main" }
        - { key: "tmux_conf_theme_left_separator_sub" }
        - { key: "tmux_conf_theme_right_separator_main" }
        - { key: "tmux_conf_theme_right_separator_sub" }
      become: no

    - name: Display oh-my-tmux installation success
      debug:
        msg: |
          ✓ oh-my-tmux configuration installed!
          Location: {{ dev_home }}/.tmux/
          Config: {{ dev_home }}/.tmux.conf.local

          Features enabled:
          - Mouse mode (toggle with <prefix> m)
          - Vi key bindings for navigation
          - Powerline separators with Nerd Font icons

          Customize further by editing ~/.tmux.conf.local
          Press <prefix> e to open the config in your editor
          (prefix is Ctrl+b by default, or Ctrl+a with oh-my-tmux)

  when: not oh_my_tmux_exists.stat.exists or oh_my_tmux_exists.stat.islnk is defined

- name: Update oh-my-tmux if already installed
  tags:
    - oh-my-tmux
    - blog
  block:
    - name: Pull latest oh-my-tmux changes
      git:
        repo: https://github.com/gpakosz/.tmux.git
        dest: "{{ dev_home }}/.tmux"
        update: yes
      become: no
      register: oh_my_tmux_updated

    - name: Display oh-my-tmux update status
      debug:
        msg: |
          {% if oh_my_tmux_updated.changed %}
          ✓ oh-my-tmux updated to latest version
          {% else %}
          ✓ oh-my-tmux already up to date
          {% endif %}

  when: oh_my_tmux_exists.stat.exists and oh_my_tmux_exists.stat.islnk is not defined