---
# Base development environment setup for ALL systems
# Includes shell environment, development tools, and core utilities
- name: Base Development Environment Setup
  hosts: all
  gather_facts: true
  vars:
    dev_user: "{{ ansible_user | default('stonecharioteer') }}"
    dev_home: "/home/{{ dev_user }}"
    
  pre_tasks:
    - name: Install essential system packages
      package:
        name:
          - curl
          - wget
          - git
          - unzip
          - tar
          - gzip
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - htop
          - tree
          - rsync
        state: present

  roles:
    # Failsafe checks for all components
    - failsafe-checks
    
    # Shell Environment
    - fish-shell
    - fish-repository-setup
    - mise-tools
    - rust-toolchain
    - fish-config
    
    # Development Environment  
    - system-deps
    - cli-tools
    - dev-folders
    - tmux-from-source
    - neovim-latest
    - tree-sitter-cli
    - astronvim-config
    - docker

  post_tasks:
    - name: Display base environment setup completion
      debug:
        msg: |
          🚀 Base Development Environment Setup Complete!
          
          🐚 Shell Environment:
          ✓ Fish shell with syntax highlighting and modern features
          ✓ Fish dotfiles cloned from: git@github.com:stonecharioteer/dotfiles-fish.git
          ✓ mise runtime manager (Node.js, Python, Go, Rust)
          ✓ Enhanced Rust toolchain with cargo-binstall
          ✓ Fish configuration with abbreviations and integrations
          
          🛠️ Development Environment:
          ✓ System dependencies and development headers
          ✓ Modern CLI tools (ripgrep, fd, fzf, starship, etc.)
          ✓ Development folder structure
          ✓ tmux compiled from latest source
          ✓ Neovim {{ neovim_version | default('latest') }} with vim symlink
          ✓ tree-sitter CLI for syntax highlighting
          ✓ AstroNvim configuration with plugins
          ✓ Docker Engine with Compose plugin
          
          📋 Next Steps:
          1. Log out and log back in for shell/group changes
          2. Test development environment:
             - tmux new-session -d -s test
             - docker run hello-world
             - nvim --version
             - mise list (verify language runtimes)
          
          🎯 Your base development environment is ready!
          - Modern shell: Fish with mise for language management
          - Development tools: tmux, Neovim/AstroNvim, Docker
          - All CLI tools integrated and configured for productivity
          
          💡 For GUI systems, also run:
          - ansible-playbook playbooks/gui-environment.yml