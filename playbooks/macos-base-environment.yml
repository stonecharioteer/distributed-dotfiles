---
# Base development environment setup for macOS
# Includes shell environment, development tools, and core utilities
- name: macOS Base Development Environment Setup
  hosts: all
  gather_facts: true
  vars:
    dev_user: "{{ ansible_user | default(lookup('env', 'USER')) }}"
    dev_home: "{{ ansible_env.HOME | default('/Users/' + dev_user) }}"

  pre_tasks:
    - name: Verify running on macOS
      assert:
        that:
          - ansible_os_family == "Darwin"
        fail_msg: "This playbook is designed for macOS only"
        success_msg: "‚úì Running on macOS {{ ansible_distribution_version }}"

    - name: Verify pbcopy is available (built-in on macOS)
      command: which pbcopy
      register: pbcopy_check
      changed_when: false
      failed_when: false

    - name: Display pbcopy status
      debug:
        msg: |
          {% if pbcopy_check.rc == 0 %}
          ‚úì pbcopy available at {{ pbcopy_check.stdout }}
          {% else %}
          ‚ö† pbcopy not found (should be built-in on macOS)
          {% endif %}

    - name: Check if Homebrew is installed
      stat:
        path: /opt/homebrew/bin/brew
      register: homebrew_check
      become: no

    - name: Display Homebrew status
      debug:
        msg: |
          {% if homebrew_check.stat.exists %}
          ‚úì Homebrew is already installed
          {% else %}
          ‚Üí Homebrew will be installed by roles
          {% endif %}

  roles:
    # Shell Environment
    - role: fish-shell
      tags: [shell, fish]
    - role: fish-repository-setup
      tags: [shell, fish, dotfiles]
    - role: scripts-repository-setup
      tags: [shell, scripts]
    - role: mise-tools
      tags: [shell, mise, languages]
    - role: rust-toolchain
      tags: [shell, rust, languages]
    - role: fish-config
      tags: [shell, fish, config]

    # Development Environment
    - role: cli-tools
      tags: [dev, cli]
    - role: dev-folders
      tags: [dev, folders]
    - role: tmux
      tags: [dev, tmux]
    - role: neovim-latest
      tags: [dev, neovim, editor]
    - role: tree-sitter-cli
      tags: [dev, neovim]
    - role: nvim-config
      tags: [dev, neovim, editor, config]
    - role: hugo
      tags: [dev, hugo, blog]
    - role: docker
      tags: [dev, docker, containers]

  post_tasks:
    - name: Display base environment setup completion
      debug:
        msg: |
          üöÄ macOS Base Development Environment Setup Complete!

          ‚ö†Ô∏è  IMPORTANT: Some tasks required sudo access:
          - Adding Fish to /etc/shells
          - Setting Fish as default shell
          You may have been prompted for your password during installation.

          üêö Shell Environment:
          ‚úì Homebrew package manager
          ‚úì Fish shell with syntax highlighting and modern features
          ‚úì Fish dotfiles cloned from: git@github.com:stonecharioteer/dotfiles-fish.git
          ‚úì Personal scripts repository cloned from: git@github.com:stonecharioteer/scripts.git
          ‚úì mise runtime manager (Node.js, Python, Go, Rust)
          ‚úì Enhanced Rust toolchain with cargo-binstall
          ‚úì Fish configuration with abbreviations and integrations

          üõ†Ô∏è Development Environment:
          ‚úì Modern CLI tools (ripgrep, fd, fzf, starship, gum, etc.)
          ‚úì Database tools (PostgreSQL client, pgcli)
          ‚úì Development folder structure
          ‚úì tmux via Homebrew
          ‚úì Neovim via Homebrew with vim symlink
          ‚úì tree-sitter CLI for syntax highlighting
          ‚úì Custom Neovim configuration from git@github.com:stonecharioteer/nvim-config.git
          ‚úì Hugo Extended static site generator
          ‚úì Docker Desktop installed

          üìã Next Steps:
          1. Restart your terminal or run: exec fish
          2. Launch Docker Desktop from Applications
          3. Test development environment:
             - tmux new-session -d -s test
             - docker run hello-world (after launching Docker Desktop)
             - nvim --version
             - mise list (verify language runtimes)
             - psql --version && pgcli --version (database tools)
             - hugo version (static site generator)

          üéØ Your macOS base development environment is ready!
          - Modern shell: Fish with mise for language management
          - Development tools: tmux, Neovim, Docker
          - All CLI tools integrated and configured for productivity

          üí° For GUI enhancements, also run:
          - ansible-playbook playbooks/macos-gui-environment.yml
