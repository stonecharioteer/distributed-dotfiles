---
# Pure development environment setup playbook
# This playbook focuses only on modern development tools without legacy tasks
- name: Development Environment Setup
  hosts: all
  gather_facts: true
  vars:
    dev_user: "{{ ansible_user | default('stonecharioteer') }}"
    dev_home: "/home/{{ dev_user }}"
    
  pre_tasks:
    - name: Install essential system packages
      package:
        name:
          - curl
          - wget
          - git
          - unzip
          - tar
          - gzip
        state: present

  roles:
    - system-deps
    - cli-tools
    - dev-folders
    - tmux-from-source
    - neovim-latest
    - tree-sitter-cli
    - astronvim-config
    - docker

  post_tasks:
    - name: Display development environment setup completion
      debug:
        msg: |
          ðŸš€ Development Environment Setup Complete!
          
          âœ“ System dependencies and development headers
            - Build tools (gcc, make, cmake, autotools)
            - Development libraries (ssl, ffi, readline, sqlite)
            - Python3 system packages (no compilation)
            - Essential utilities (curl, git, htop)
          
          âœ“ Modern CLI tools installed
            - File search: ripgrep, fd-find, fzf
            - Directory tools: tree, zoxide  
            - Development: direnv, httpie
            - File watching: watchexec-cli (via cargo binstall)
            - Terminal UI: starship prompt, gum
            - Utilities: cowsay, fortune, lolcat, neofetch
          
          âœ“ Development folder structure created
            - ~/code/checkouts/{personal,work}/
            - ~/code/tools/
            - ~/workspace/{projects,scratch}/
            - ~/Pictures/screenshots/
            - ~/.local/bin/
          
          âœ“ tmux compiled from source (latest version)
            - Installed to /usr/local/bin/tmux
            - All dependencies satisfied
          
          âœ“ Neovim {{ neovim_version }} installed
            - Binary: /usr/local/bin/nvim
            - Vim symlink: /usr/local/bin/vim
          
          âœ“ tree-sitter CLI via npm/mise
            - Requires Node.js from mise (fish ansible setup)
          
          âœ“ AstroNvim configuration installed
            - Configuration: ~/.config/nvim
            - Plugins installed headlessly
          
          âœ“ Docker Engine installed
            - Latest Docker CE with Compose plugin
            - User added to docker group
            - Services enabled for boot
          
          ðŸ“‹ Next Steps:
          1. Log out and log back in for group/PATH updates
          2. Test Docker: docker run hello-world
          3. Run 'nvim' to complete any remaining plugin setup
          4. Install language servers: ':LspInstall <server>'
          5. Install language parsers: ':TSInstall <language>'
          
          ðŸ“‹ Prerequisites (run separately):
          - Fish shell setup with mise (Node.js, Python, Go, Rust)
          - Fonts installation (JetBrains Mono Nerd Font)
          
          ðŸ”§ For a complete system setup, use:
          - playbooks/gui.yml (GUI machines)
          - playbooks/servers.yml (headless servers)  
          - playbooks/laptops.yml (laptops)